# -*- coding: utf-8 -*-
"""OutriX_tasks1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HA11Hdfle_s8HFk0C8zlFZp41dIjAEjl

**Exploratory Data Analysis on E-Commerce Data**
"""

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Display all columns
pd.set_option("display.max_columns", None)

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['ecommerce.csv']))

# Step 3: Basic exploration
print("Shape of dataset:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nMissing Values:")
print(df.isnull().sum())

# Step 4: Data Cleaning
# Fill or drop missing values
df.fillna({"CustomerID": "Unknown"}, inplace=True)
df.dropna(subset=["ProductID"], inplace=True)

# Remove duplicates
df.drop_duplicates(inplace=True)

# Step 5: Summary Statistics
print("\nSummary Statistics:")
print(df.describe(include="all"))

fig, axes = plt.subplots(4, 2, figsize=(12, 14))  # smaller overall figure
fig.subplots_adjust(hspace=0.6, wspace=0.4)       # more spacing between plots

# Step 6: Univariate Analysis
sns.countplot(x="Category", data=df, order=df['Category'].value_counts().index, ax=axes[0,0])
axes[0,0].set_title("Product Categories Distribution")
axes[0,0].tick_params(axis='x', rotation=45)

sns.histplot(df["Price"], bins=30, kde=True, ax=axes[0,1])
axes[0,1].set_title("Price Distribution")

# Step 7: Bivariate Analysis
sns.boxplot(x="Category", y="Price", data=df, ax=axes[1,0])
axes[1,0].set_title("Price vs Product Category")
axes[1,0].tick_params(axis='x', rotation=45)

sns.barplot(x="Category", y="Quantity", data=df, estimator=sum, ax=axes[1,1])
axes[1,1].set_title("Total Quantity Sold by Category")
axes[1,1].tick_params(axis='x', rotation=45)

# Step 8: Customer Insights
top_customers = df["CustomerID"].value_counts().head(10)
sns.barplot(x=top_customers.index, y=top_customers.values, ax=axes[2,0])
axes[2,0].set_title("Top 10 Customers by Transactions")
axes[2,0].tick_params(axis='x', rotation=45)

# Step 9: Product Performance
top_products = df["ProductName"].value_counts().head(10)
sns.barplot(x=top_products.index, y=top_products.values, ax=axes[2,1])
axes[2,1].set_title("Top 10 Best-Selling Products")
axes[2,1].tick_params(axis='x', rotation=90)

# Step 10: Correlation Heatmap
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", ax=axes[3,0])
axes[3,0].set_title("Correlation Heatmap")
axes[3,1].axis("off")  # keep empty so layout remains neat

# Adjust layout
plt.tight_layout()
plt.show()

print("\nâœ… EDA Completed Successfully!")